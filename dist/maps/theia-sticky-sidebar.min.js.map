{"version":3,"sources":["theia-sticky-sidebar.js"],"names":["$","fn","theiaStickySidebar","options","$that","tryInit","initialized","width","minWidth","init","namespace","length","append","each","javaScriptMIMETypes","o","collapsedTopHeight","sidebar","this","container","containerSelector","parent","parents","css","position","defaultPosition","overflow","-webkit-box-sizing","-moz-box-sizing","box-sizing","stickySidebar","find","filter","index","script","type","match","remove","addClass","children","marginBottom","parseInt","paddingTop","paddingBottom","offset","top","collapsedBottomHeight","outerHeight","resetSidebar","fixedScrollTop","min-height","transform","stickySidebarPaddingTop","stickySidebarPaddingBottom","previousScrollTop","onScroll","is","disableOnResponsiveLayouts","outerWidth","windowOffsetTop","windowOffsetBottom","sidebarSameHeightAsContainer","e","height","scrollLeft","scrollTop","document","additionalMarginTop","offsetTop","offsetBottom","additionalMarginBottom","containerTop","containerBottom","Math","max","window","staticLimitTop","staticLimitBottom","scrollTopDiff","sidebarBehavior","min","getWidthForObject","left","updateSidebarHeight","on","scrollSelector","ResizeSensor","object","getBoundingClientRect","err","extend","console","log","evt","unbind","jQuery"],"mappings":"AAUA,CAAA,SAAAA,GACAA,EAAAC,GAAAC,mBAAA,SAAAC,GACA,IAqBAC,EA4BA,SAAAC,EAAAF,EAAAC,GACA,GAAA,CAAA,IAAAD,EAAAG,YAAA,CAIA,GAAAN,EAAA,MAAA,EAAAO,MAAA,EAAAJ,EAAAK,SACA,MAAA,CAAA,EAGAC,IAMAN,EANAA,EAMAC,EANAA,EAOAD,EAAAG,YAAA,CAAA,EAIA,IADAN,EAAA,oCAAAG,EAAAO,SAAA,EACAC,QACAX,EAAA,MAAA,EAAAY,OAAAZ,EAAA,8CAAAG,EAAAO,UAAA,iFAAA,CAAA,EAGAN,EAAAS,KAAA,WACA,IA4BAC,EAgMAC,EAKAA,EAOAA,EAWAA,EAnPAA,EAAA,GA2CAC,GAzCAD,EAAAE,QAAAjB,EAAAkB,IAAA,EAGAH,EAAAZ,QAAAA,GAAA,GAGAY,EAAAI,UAAAnB,EAAAe,EAAAZ,QAAAiB,iBAAA,EACA,GAAAL,EAAAI,UAAAR,SACAI,EAAAI,UAAAJ,EAAAE,QAAAI,OAAA,GAIAN,EAAAE,QAAAK,QAAA,EAAAC,IAAA,oBAAA,MAAA,EACAR,EAAAE,QAAAM,IAAA,CACAC,SAAAT,EAAAZ,QAAAsB,gBACAC,SAAA,UAEAC,qBAAA,aACAC,kBAAA,aACAC,aAAA,YACA,CAAA,EAGAd,EAAAe,cAAAf,EAAAE,QAAAc,KAAA,qBAAA,EACA,GAAAhB,EAAAe,cAAAnB,SAEAG,EAAA,0DACAC,EAAAE,QAAAc,KAAA,QAAA,EAAAC,OAAA,SAAAC,EAAAC,GACA,OAAA,IAAAA,EAAAC,KAAAxB,QAAAuB,EAAAC,KAAAC,MAAAtB,CAAA,CACA,CAAA,EAAAuB,OAAA,EAEAtB,EAAAe,cAAA9B,EAAA,OAAA,EAAAsC,SAAA,oBAAA,EAAA1B,OAAAG,EAAAE,QAAAsB,SAAA,CAAA,EACAxB,EAAAE,QAAAL,OAAAG,EAAAe,aAAA,GAIAf,EAAAyB,aAAAC,SAAA1B,EAAAE,QAAAM,IAAA,eAAA,CAAA,EACAR,EAAA2B,WAAAD,SAAA1B,EAAAE,QAAAM,IAAA,aAAA,CAAA,EACAR,EAAA4B,cAAAF,SAAA1B,EAAAE,QAAAM,IAAA,gBAAA,CAAA,EAGAR,EAAAe,cAAAc,OAAA,EAAAC,KACAC,EAAA/B,EAAAe,cAAAiB,YAAA,EA+MA,SAAAC,IACAjC,EAAAkC,eAAA,EACAlC,EAAAE,QAAAM,IAAA,CACA2B,aAAA,KACA,CAAA,EACAnC,EAAAe,cAAAP,IAAA,CACAC,SAAA,SACAjB,MAAA,GACA4C,UAAA,MACA,CAAA,CACA,CAxNApC,EAAAe,cAAAP,IAAA,cAAA,CAAA,EACAR,EAAAe,cAAAP,IAAA,iBAAA,CAAA,EACAP,GAAAD,EAAAe,cAAAc,OAAA,EAAAC,IACAC,EAAA/B,EAAAe,cAAAiB,YAAA,EAAAD,EAAA9B,EACA,GAAAA,GACAD,EAAAe,cAAAP,IAAA,cAAA,CAAA,EACAR,EAAAqC,wBAAA,GAGArC,EAAAqC,wBAAA,EAGA,GAAAN,GACA/B,EAAAe,cAAAP,IAAA,iBAAA,CAAA,EACAR,EAAAsC,2BAAA,GAGAtC,EAAAsC,2BAAA,EAIAtC,EAAAuC,kBAAA,KAGAvC,EAAAkC,eAAA,EAGAD,EAAA,EAEAjC,EAAAwC,SAAA,SAAAxC,GAEA,GAAAA,EAAAe,cAAA0B,GAAA,UAAA,EAKA,GAAAxD,EAAA,MAAA,EAAAO,MAAA,EAAAQ,EAAAZ,QAAAK,SACAwC,EAAA,MADA,CAMA,GAAAjC,EAAAZ,QAAAsD,2BAGA,GAFA1C,EAAAE,QAAAyC,WAAA,QAAA3C,EAAAE,QAAAM,IAAA,OAAA,CAAA,EAEA,GAAAR,EAAAI,UAAAZ,MAAA,EAEA,OADAyC,KAAAA,EAAA,EAKA,IAcAW,EAKAC,EAuCAC,EA8GAC,EACAC,EAxFAC,EAWAzC,EA5FA0C,EAAAjE,EAAAkE,QAAA,EAAAD,UAAA,EACAzC,EAAA,SAGAyC,GAAAlD,EAAAE,QAAA2B,OAAA,EAAAC,KAAA9B,EAAA2B,WAAA3B,EAAAZ,QAAAgE,uBAEAC,EAAArD,EAAA2B,WAAAvC,EAAAgE,oBACAE,EAAAtD,EAAA4B,cAAA5B,EAAAyB,aAAArC,EAAAmE,uBAGAC,EAAAxD,EAAAE,QAAA2B,OAAA,EAAAC,IACA2B,EAAAzD,EAAAE,QAAA2B,OAAA,EAAAC,KA6JAiB,EA7JA/C,EAAAI,UA8JA4C,EAAAD,EAAAC,OAAA,EAEAD,EAAAvB,SAAA,EAAA1B,KAAA,WACAkD,EAAAU,KAAAC,IAAAX,EAAA/D,EAAAkB,IAAA,EAAA6C,OAAA,CAAA,CACA,CAAA,EAEAA,GAjKAJ,EAAA,EAAAxD,EAAAgE,oBAKAP,EAFA7C,EAAAe,cAAAiB,YAAA,EAAAqB,EAAAC,EAAArE,EAAA2E,MAAA,EAAAZ,OAAA,EAEAJ,EAAA5C,EAAAe,cAAAiB,YAAA,EAGA/C,EAAA2E,MAAA,EAAAZ,OAAA,EAAAhD,EAAAyB,aAAAzB,EAAA4B,cAAAxC,EAAAmE,uBAGAM,EAAAL,EAAAN,EAAAlD,EAAA2B,WACAmC,EAAAL,EAAAP,EAAAlD,EAAA4B,cAAA5B,EAAAyB,aAEAK,EAAA9B,EAAAe,cAAAc,OAAA,EAAAC,IAAAoB,EACAa,EAAA/D,EAAAuC,kBAAAW,EAGA,SAAAlD,EAAAe,cAAAP,IAAA,UAAA,GACA,UAAAR,EAAAZ,QAAA4E,kBACAlC,GAAAiC,GAIA,gBAAA/D,EAAAZ,QAAA4E,kBACAlC,EAAA1C,EAAAgE,qBAGA,mBAAApD,EAAAZ,QAAA4E,kBACAlC,EAAAe,EAAA7C,EAAAe,cAAAiB,YAAA,GAIAF,EADA,EAAAiC,EACAL,KAAAO,IAAAnC,EAAAc,CAAA,EAGAc,KAAAC,IAAA7B,EAAAe,EAAA7C,EAAAe,cAAAiB,YAAA,CAAA,EAGAF,EAAA4B,KAAAC,IAAA7B,EAAA+B,CAAA,EAEA/B,EAAA4B,KAAAO,IAAAnC,EAAAgC,EAAA9D,EAAAe,cAAAiB,YAAA,CAAA,EAaAvB,IAVAqC,EAAA9C,EAAAI,UAAA4C,OAAA,GAAAhD,EAAAe,cAAAiB,YAAA,IAEAF,GAAAc,KAGAE,GAAAhB,GAAAe,EAAA7C,EAAAe,cAAAiB,YAAA,GAGAkB,EAAApB,EAAA9B,EAAAE,QAAA2B,OAAA,EAAAC,IAAA9B,EAAA2B,YAAAvC,EAAAgE,oBAEA,SAIA,WAXA,SAmBA,SAAA3C,GACAwC,EAAAhE,EAAAkE,QAAA,EAAAF,WAAA,EAEAjD,EAAAe,cAAAP,IAAA,CACAC,SAAA,QACAjB,MAAA0E,EAAAlE,EAAAe,aAAA,EAAA,KACAqB,UAAA,cAAAN,EAAA,MACAqC,KAAAnE,EAAAE,QAAA2B,OAAA,EAAAsC,KAAAzC,SAAA1B,EAAAE,QAAAM,IAAA,cAAA,CAAA,EAAAyC,EAAA,KACAnB,IAAA,KACA,CAAA,GAEA,YAAArB,GACAD,EAAA,GAEA,YAAAR,EAAAe,cAAAP,IAAA,UAAA,IACAA,EAAAC,SAAA,WACAD,EAAA4B,UAAA,eAAAc,EAAApB,EAAA9B,EAAAE,QAAA2B,OAAA,EAAAC,IAAA9B,EAAAqC,wBAAArC,EAAAsC,4BAAA,MACA9B,EAAAsB,IAAA,OAGAtB,EAAAhB,MAAA0E,EAAAlE,EAAAe,aAAA,EAAA,KACAP,EAAA2D,KAAA,GAEAnE,EAAAe,cAAAP,IAAAA,CAAA,GAEA,UAAAC,GACAwB,EAAA,EAGA,UAAAxB,GACA,GAAAT,EAAAZ,QAAAgF,qBACApE,EAAAE,QAAAM,IAAA,CACA2B,aAAAnC,EAAAe,cAAAiB,YAAA,EAAAhC,EAAAe,cAAAc,OAAA,EAAAC,IAAA9B,EAAAE,QAAA2B,OAAA,EAAAC,IAAA9B,EAAA4B,aACA,CAAA,EAIA5B,EAAAuC,kBAAAW,CAjIA,CAkIA,EAGAlD,EAAAwC,SAAAxC,CAAA,EAGAf,EAAAkE,QAAA,EAAAkB,GAAA,UAAArE,EAAAZ,QAAAO,WAAAK,EAIAA,EAHA,WACAA,EAAAwC,SAAAxC,CAAA,CACA,EACA,EACAf,EAAA2E,MAAA,EAAAS,GAAA,UAAArE,EAAAZ,QAAAO,WAAAK,EAKAA,EAJA,WACAA,EAAAe,cAAAP,IAAA,CAAAC,SAAA,QAAA,CAAA,EACAT,EAAAwC,SAAAxC,CAAA,CACA,EACA,EACAA,EAAAZ,QAAAkF,gBACArF,EAAA2E,MAAA,EAAAS,GAAA,UAAArE,EAAAZ,QAAAO,WAAAK,EAKAA,EAJA,WACAA,EAAAe,cAAAP,IAAA,CAAAC,SAAA,QAAA,CAAA,EACAT,EAAAwC,SAAAxC,CAAA,CACA,EACA,EAKA,aAAA,OAAAuE,cACA,IAAAA,aAAAvE,EAAAe,cAAA,IAAAf,EAIAA,EAHA,WACAA,EAAAwC,SAAAxC,CAAA,CACA,EACA,CA0BA,CAAA,CAvSA,CAQA,MAAA,CAAA,CACA,CAiSA,SAAAkE,EAAAM,GACA,IAAAhF,EAEA,IACAA,EAAAgF,EAAA,GAAAC,sBAAA,EAAAjF,KAGA,CADA,MAAAkF,IAOA,OAHAlF,EADA,KAAA,IAAAA,EACAgF,EAAAhF,MAAA,EAGAA,CACA,CAEA,OAlWAJ,EAAAH,EAAA0F,OAZA,CACAtE,kBAAA,GACA+C,oBAAA,EACAG,uBAAA,EACAa,oBAAA,CAAA,EACA3E,SAAA,EACAiD,2BAAA,CAAA,EACAsB,gBAAA,SACAtD,gBAAA,WACAf,UAAA,MACA2E,eAAA,EACA,EACAlF,CAAA,GAGAgE,oBAAA1B,SAAAtC,EAAAgE,mBAAA,GAAA,EACAhE,EAAAmE,uBAAA7B,SAAAtC,EAAAmE,sBAAA,GAAA,EAMAjE,EADAF,EAHAA,EAGAC,EAHAc,IAIA,IAGAyE,QAAAC,IAAA,iEAAA,EAEA5F,EAAAkE,QAAA,EAAAkB,GAAA,UAAAjF,EAAAO,UAAA,SAAAP,EAAAC,GACA,OAAA,SAAAyF,GACAxF,EAAAF,EAAAC,CAAA,GAGAJ,EAAAkB,IAAA,EAAA4E,OAAAD,CAAA,CAEA,CACA,EAAA1F,EAAAC,CAAA,CAAA,EACAJ,EAAA2E,MAAA,EAAAS,GAAA,UAAAjF,EAAAO,UAAA,SAAAP,EAAAC,GACA,OAAA,SAAAyF,GACAxF,EAAAF,EAAAC,CAAA,GAGAJ,EAAAkB,IAAA,EAAA4E,OAAAD,CAAA,CAEA,CACA,EAAA1F,EAAAC,CAAA,CAAA,GAkUAc,IACA,CACA,EAAA6E,MAAA","file":"../theia-sticky-sidebar.min.js","sourcesContent":["/*!\r\n * Theia Sticky Sidebar v1.7.0\r\n * https://github.com/WeCodePixels/theia-sticky-sidebar\r\n *\r\n * Glues your website's sidebars, making them permanently visible while scrolling.\r\n *\r\n * Copyright 2013-2016 WeCodePixels and other contributors\r\n * Released under the MIT license\r\n */\r\n\r\n(function ($) {\r\n    $.fn.theiaStickySidebar = function (options) {\r\n        var defaults = {\r\n            'containerSelector': '',\r\n            'additionalMarginTop': 0,\r\n            'additionalMarginBottom': 0,\r\n            'updateSidebarHeight': true,\r\n            'minWidth': 0,\r\n            'disableOnResponsiveLayouts': true,\r\n            'sidebarBehavior': 'modern',\r\n            'defaultPosition': 'relative',\r\n            'namespace': 'TSS',\r\n\t\t\t\t'scrollSelector': '',\r\n        };\r\n        options = $.extend(defaults, options);\r\n\r\n        // Validate options\r\n        options.additionalMarginTop = parseInt(options.additionalMarginTop) || 0;\r\n        options.additionalMarginBottom = parseInt(options.additionalMarginBottom) || 0;\r\n\r\n        tryInitOrHookIntoEvents(options, this);\r\n\r\n        // Try doing init, otherwise hook into window.resize and document.scroll and try again then.\r\n        function tryInitOrHookIntoEvents(options, $that) {\r\n            var success = tryInit(options, $that);\r\n\r\n            if (!success) {\r\n                console.log('TSS: Body width smaller than options.minWidth. Init is delayed.');\r\n\r\n                $(document).on('scroll.' + options.namespace, function (options, $that) {\r\n                    return function (evt) {\r\n                        var success = tryInit(options, $that);\r\n\r\n                        if (success) {\r\n                            $(this).unbind(evt);\r\n                        }\r\n                    };\r\n                }(options, $that));\r\n                $(window).on('resize.' + options.namespace, function (options, $that) {\r\n                    return function (evt) {\r\n                        var success = tryInit(options, $that);\r\n\r\n                        if (success) {\r\n                            $(this).unbind(evt);\r\n                        }\r\n                    };\r\n                }(options, $that))\r\n            }\r\n        }\r\n\r\n        // Try doing init if proper conditions are met.\r\n        function tryInit(options, $that) {\r\n            if (options.initialized === true) {\r\n                return true;\r\n            }\r\n\r\n            if ($('body').width() < options.minWidth) {\r\n                return false;\r\n            }\r\n\r\n            init(options, $that);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Init the sticky sidebar(s).\r\n        function init(options, $that) {\r\n            options.initialized = true;\r\n\r\n            // Add CSS\r\n            var existingStylesheet = $('#theia-sticky-sidebar-stylesheet-' + options.namespace);\r\n            if (existingStylesheet.length === 0) {\r\n                $('head').append($('<style id=\"theia-sticky-sidebar-stylesheet-' + options.namespace + '\">.theiaStickySidebar:after {content: \"\"; display: table; clear: both;}</style>'));\r\n            }\r\n\r\n            $that.each(function () {\r\n                var o = {};\r\n\r\n                o.sidebar = $(this);\r\n\r\n                // Save options\r\n                o.options = options || {};\r\n\r\n                // Get container\r\n                o.container = $(o.options.containerSelector);\r\n                if (o.container.length == 0) {\r\n                    o.container = o.sidebar.parent();\r\n                }\r\n\r\n                // Create sticky sidebar\r\n                o.sidebar.parents().css('-webkit-transform', 'none'); // Fix for WebKit bug - https://code.google.com/p/chromium/issues/detail?id=20574\r\n                o.sidebar.css({\r\n                    'position': o.options.defaultPosition,\r\n                    'overflow': 'visible',\r\n                    // The \"box-sizing\" must be set to \"content-box\" because we set a fixed height to this element when the sticky sidebar has a fixed position.\r\n                    '-webkit-box-sizing': 'border-box',\r\n                    '-moz-box-sizing': 'border-box',\r\n                    'box-sizing': 'border-box'\r\n                });\r\n\r\n                // Get the sticky sidebar element. If none has been found, then create one.\r\n                o.stickySidebar = o.sidebar.find('.theiaStickySidebar');\r\n                if (o.stickySidebar.length == 0) {\r\n                    // Remove <script> tags, otherwise they will be run again when added to the stickySidebar.\r\n                    var javaScriptMIMETypes = /(?:text|application)\\/(?:x-)?(?:javascript|ecmascript)/i;\r\n                    o.sidebar.find('script').filter(function (index, script) {\r\n                        return script.type.length === 0 || script.type.match(javaScriptMIMETypes);\r\n                    }).remove();\r\n\r\n                    o.stickySidebar = $('<div>').addClass('theiaStickySidebar').append(o.sidebar.children());\r\n                    o.sidebar.append(o.stickySidebar);\r\n                }\r\n\r\n                // Get existing top and bottom margins and paddings\r\n                o.marginBottom = parseInt(o.sidebar.css('margin-bottom'));\r\n                o.paddingTop = parseInt(o.sidebar.css('padding-top'));\r\n                o.paddingBottom = parseInt(o.sidebar.css('padding-bottom'));\r\n\r\n                // Add a temporary padding rule to check for collapsable margins.\r\n                var collapsedTopHeight = o.stickySidebar.offset().top;\r\n                var collapsedBottomHeight = o.stickySidebar.outerHeight();\r\n                o.stickySidebar.css('padding-top', 1);\r\n                o.stickySidebar.css('padding-bottom', 1);\r\n                collapsedTopHeight -= o.stickySidebar.offset().top;\r\n                collapsedBottomHeight = o.stickySidebar.outerHeight() - collapsedBottomHeight - collapsedTopHeight;\r\n                if (collapsedTopHeight == 0) {\r\n                    o.stickySidebar.css('padding-top', 0);\r\n                    o.stickySidebarPaddingTop = 0;\r\n                }\r\n                else {\r\n                    o.stickySidebarPaddingTop = 1;\r\n                }\r\n\r\n                if (collapsedBottomHeight == 0) {\r\n                    o.stickySidebar.css('padding-bottom', 0);\r\n                    o.stickySidebarPaddingBottom = 0;\r\n                }\r\n                else {\r\n                    o.stickySidebarPaddingBottom = 1;\r\n                }\r\n\r\n                // We use this to know whether the user is scrolling up or down.\r\n                o.previousScrollTop = null;\r\n\r\n                // Scroll top (value) when the sidebar has fixed position.\r\n                o.fixedScrollTop = 0;\r\n\r\n                // Set sidebar to default values.\r\n                resetSidebar();\r\n\r\n                o.onScroll = function (o) {\r\n                    // Stop if the sidebar isn't visible.\r\n                    if (!o.stickySidebar.is(\":visible\")) {\r\n                        return;\r\n                    }\r\n\r\n                    // Stop if the window is too small.\r\n                    if ($('body').width() < o.options.minWidth) {\r\n                        resetSidebar();\r\n                        return;\r\n                    }\r\n\r\n                    // Stop if the sidebar width is larger than the container width (e.g. the theme is responsive and the sidebar is now below the content)\r\n                    if (o.options.disableOnResponsiveLayouts) {\r\n                        var sidebarWidth = o.sidebar.outerWidth(o.sidebar.css('float') == 'none');\r\n\r\n                        if (sidebarWidth + 50 > o.container.width()) {\r\n                            resetSidebar();\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    var scrollTop = $(document).scrollTop();\r\n                    var position = 'static';\r\n\r\n                    // If the user has scrolled down enough for the sidebar to be clipped at the top, then we can consider changing its position.\r\n                    if (scrollTop >= o.sidebar.offset().top + (o.paddingTop - o.options.additionalMarginTop)) {\r\n                        // The top and bottom offsets, used in various calculations.\r\n                        var offsetTop = o.paddingTop + options.additionalMarginTop;\r\n                        var offsetBottom = o.paddingBottom + o.marginBottom + options.additionalMarginBottom;\r\n\r\n                        // All top and bottom positions are relative to the window, not to the parent elemnts.\r\n                        var containerTop = o.sidebar.offset().top;\r\n                        var containerBottom = o.sidebar.offset().top + getClearedHeight(o.container);\r\n\r\n                        // The top and bottom offsets relative to the window screen top (zero) and bottom (window height).\r\n                        var windowOffsetTop = 0 + options.additionalMarginTop;\r\n                        var windowOffsetBottom;\r\n\r\n                        var sidebarSmallerThanWindow = (o.stickySidebar.outerHeight() + offsetTop + offsetBottom) < $(window).height();\r\n                        if (sidebarSmallerThanWindow) {\r\n                            windowOffsetBottom = windowOffsetTop + o.stickySidebar.outerHeight();\r\n                        }\r\n                        else {\r\n                            windowOffsetBottom = $(window).height() - o.marginBottom - o.paddingBottom - options.additionalMarginBottom;\r\n                        }\r\n\r\n                        var staticLimitTop = containerTop - scrollTop + o.paddingTop;\r\n                        var staticLimitBottom = containerBottom - scrollTop - o.paddingBottom - o.marginBottom;\r\n\r\n                        var top = o.stickySidebar.offset().top - scrollTop;\r\n                        var scrollTopDiff = o.previousScrollTop - scrollTop;\r\n\r\n                        // If the sidebar position is fixed, then it won't move up or down by itself. So, we manually adjust the top coordinate.\r\n                        if (o.stickySidebar.css('position') == 'fixed') {\r\n                            if (o.options.sidebarBehavior == 'modern') {\r\n                                top += scrollTopDiff;\r\n                            }\r\n                        }\r\n\r\n                        if (o.options.sidebarBehavior == 'stick-to-top') {\r\n                            top = options.additionalMarginTop;\r\n                        }\r\n\r\n                        if (o.options.sidebarBehavior == 'stick-to-bottom') {\r\n                            top = windowOffsetBottom - o.stickySidebar.outerHeight();\r\n                        }\r\n\r\n                        if (scrollTopDiff > 0) { // If the user is scrolling up.\r\n                            top = Math.min(top, windowOffsetTop);\r\n                        }\r\n                        else { // If the user is scrolling down.\r\n                            top = Math.max(top, windowOffsetBottom - o.stickySidebar.outerHeight());\r\n                        }\r\n\r\n                        top = Math.max(top, staticLimitTop);\r\n\r\n                        top = Math.min(top, staticLimitBottom - o.stickySidebar.outerHeight());\r\n\r\n                        // If the sidebar is the same height as the container, we won't use fixed positioning.\r\n                        var sidebarSameHeightAsContainer = o.container.height() == o.stickySidebar.outerHeight();\r\n\r\n                        if (!sidebarSameHeightAsContainer && top == windowOffsetTop) {\r\n                            position = 'fixed';\r\n                        }\r\n                        else if (!sidebarSameHeightAsContainer && top == windowOffsetBottom - o.stickySidebar.outerHeight()) {\r\n                            position = 'fixed';\r\n                        }\r\n                        else if (scrollTop + top - o.sidebar.offset().top - o.paddingTop <= options.additionalMarginTop) {\r\n                            // Stuck to the top of the page. No special behavior.\r\n                            position = 'static';\r\n                        }\r\n                        else {\r\n                            // Stuck to the bottom of the page.\r\n                            position = 'absolute';\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * Performance notice: It's OK to set these CSS values at each resize/scroll, even if they don't change.\r\n                     * It's way slower to first check if the values have changed.\r\n                     */\r\n                    if (position == 'fixed') {\r\n                        var scrollLeft = $(document).scrollLeft();\r\n\r\n                        o.stickySidebar.css({\r\n                            'position': 'fixed',\r\n                            'width': getWidthForObject(o.stickySidebar) + 'px',\r\n                            'transform': 'translateY(' + top + 'px)',\r\n                            'left': (o.sidebar.offset().left + parseInt(o.sidebar.css('padding-left')) - scrollLeft) + 'px',\r\n                            'top': '0px'\r\n                        });\r\n                    }\r\n                    else if (position == 'absolute') {\r\n                        var css = {};\r\n\r\n                        if (o.stickySidebar.css('position') != 'absolute') {\r\n                            css.position = 'absolute';\r\n                            css.transform = 'translateY(' + (scrollTop + top - o.sidebar.offset().top - o.stickySidebarPaddingTop - o.stickySidebarPaddingBottom) + 'px)';\r\n                            css.top = '0px';\r\n                        }\r\n\r\n                        css.width = getWidthForObject(o.stickySidebar) + 'px';\r\n                        css.left = '';\r\n\r\n                        o.stickySidebar.css(css);\r\n                    }\r\n                    else if (position == 'static') {\r\n                        resetSidebar();\r\n                    }\r\n\r\n                    if (position != 'static') {\r\n                        if (o.options.updateSidebarHeight == true) {\r\n                            o.sidebar.css({\r\n                                'min-height': o.stickySidebar.outerHeight() + o.stickySidebar.offset().top - o.sidebar.offset().top + o.paddingBottom\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    o.previousScrollTop = scrollTop;\r\n                };\r\n\r\n                // Initialize the sidebar's position.\r\n                o.onScroll(o);\r\n\r\n                // Recalculate the sidebar's position on every scroll and resize.\r\n                $(document).on('scroll.' + o.options.namespace, function (o) {\r\n                    return function () {\r\n                        o.onScroll(o);\r\n                    };\r\n                }(o));\r\n                $(window).on('resize.' + o.options.namespace, function (o) {\r\n                    return function () {\r\n                        o.stickySidebar.css({'position': 'static'});\r\n                        o.onScroll(o);\r\n                    };\r\n                }(o));\r\n\t\t\t\t\t if (o.options.scrollSelector) {\n                    $(window).on('resize.' + o.options.namespace, function (o) {\r\n\t\t\t\t\t\t\t  return function () {\r\n\t\t\t\t\t\t\t\t\to.stickySidebar.css({'position': 'static'});\r\n\t\t\t\t\t\t\t\t\to.onScroll(o);\r\n\t\t\t\t\t\t\t  };\r\n                    }(o));\n\t\t\t\t\t }\r\n\t\t\t\t\t \r\n\r\n                // Recalculate the sidebar's position every time the sidebar changes its size.\r\n                if (typeof ResizeSensor !== 'undefined') {\r\n                    new ResizeSensor(o.stickySidebar[0], function (o) {\r\n                        return function () {\r\n                            o.onScroll(o);\r\n                        };\r\n                    }(o));\r\n                }\r\n\r\n                // Reset the sidebar to its default state\r\n                function resetSidebar() {\r\n                    o.fixedScrollTop = 0;\r\n                    o.sidebar.css({\r\n                        'min-height': '1px'\r\n                    });\r\n                    o.stickySidebar.css({\r\n                        'position': 'static',\r\n                        'width': '',\r\n                        'transform': 'none'\r\n                    });\r\n                }\r\n\r\n                // Get the height of a div as if its floated children were cleared. Note that this function fails if the floats are more than one level deep.\r\n                function getClearedHeight(e) {\r\n                    var height = e.height();\r\n\r\n                    e.children().each(function () {\r\n                        height = Math.max(height, $(this).height());\r\n                    });\r\n\r\n                    return height;\r\n                }\r\n            });\r\n        }\r\n\r\n        function getWidthForObject(object) {\r\n            var width;\r\n\r\n            try {\r\n                width = object[0].getBoundingClientRect().width;\r\n            }\r\n            catch (err) {\r\n            }\r\n\r\n            if (typeof width === \"undefined\") {\r\n                width = object.width();\r\n            }\r\n\r\n            return width;\r\n        }\r\n\r\n        return this;\r\n    }\r\n})(jQuery);\r\n"]}