{"version":3,"sources":["theia-sticky-sidebar.js"],"names":[],"mappingsfile":"../theia-sticky-sidebar.js","sourcesContent":["/*!\r\n * Theia Sticky Sidebar v1.7.0\r\n * https://github.com/WeCodePixels/theia-sticky-sidebar\r\n *\r\n * Glues your website's sidebars, making them permanently visible while scrolling.\r\n *\r\n * Copyright 2013-2016 WeCodePixels and other contributors\r\n * Released under the MIT license\r\n */\r\n\r\n(function ($) {\r\n    $.fn.theiaStickySidebar = function (options) {\r\n        var defaults = {\r\n            'containerSelector': '',\r\n            'additionalMarginTop': 0,\r\n            'additionalMarginBottom': 0,\r\n            'updateSidebarHeight': true,\r\n            'minWidth': 0,\r\n            'disableOnResponsiveLayouts': true,\r\n            'sidebarBehavior': 'modern',\r\n            'defaultPosition': 'relative',\r\n            'namespace': 'TSS',\r\n\t\t\t\t'scrollSelector': '',\r\n        };\r\n        options = $.extend(defaults, options);\r\n\r\n        // Validate options\r\n        options.additionalMarginTop = parseInt(options.additionalMarginTop) || 0;\r\n        options.additionalMarginBottom = parseInt(options.additionalMarginBottom) || 0;\r\n\r\n        tryInitOrHookIntoEvents(options, this);\r\n\r\n        // Try doing init, otherwise hook into window.resize and document.scroll and try again then.\r\n        function tryInitOrHookIntoEvents(options, $that) {\r\n            var success = tryInit(options, $that);\r\n\r\n            if (!success) {\r\n                console.log('TSS: Body width smaller than options.minWidth. Init is delayed.');\r\n\r\n                $(document).on('scroll.' + options.namespace, function (options, $that) {\r\n                    return function (evt) {\r\n                        var success = tryInit(options, $that);\r\n\r\n                        if (success) {\r\n                            $(this).unbind(evt);\r\n                        }\r\n                    };\r\n                }(options, $that));\r\n                $(window).on('resize.' + options.namespace, function (options, $that) {\r\n                    return function (evt) {\r\n                        var success = tryInit(options, $that);\r\n\r\n                        if (success) {\r\n                            $(this).unbind(evt);\r\n                        }\r\n                    };\r\n                }(options, $that))\r\n            }\r\n        }\r\n\r\n        // Try doing init if proper conditions are met.\r\n        function tryInit(options, $that) {\r\n            if (options.initialized === true) {\r\n                return true;\r\n            }\r\n\r\n            if ($('body').width() < options.minWidth) {\r\n                return false;\r\n            }\r\n\r\n            init(options, $that);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Init the sticky sidebar(s).\r\n        function init(options, $that) {\r\n            options.initialized = true;\r\n\r\n            // Add CSS\r\n            var existingStylesheet = $('#theia-sticky-sidebar-stylesheet-' + options.namespace);\r\n            if (existingStylesheet.length === 0) {\r\n                $('head').append($('<style id=\"theia-sticky-sidebar-stylesheet-' + options.namespace + '\">.theiaStickySidebar:after {content: \"\"; display: table; clear: both;}</style>'));\r\n            }\r\n\r\n            $that.each(function () {\r\n                var o = {};\r\n\r\n                o.sidebar = $(this);\r\n\r\n                // Save options\r\n                o.options = options || {};\r\n\r\n                // Get container\r\n                o.container = $(o.options.containerSelector);\r\n                if (o.container.length == 0) {\r\n                    o.container = o.sidebar.parent();\r\n                }\r\n\r\n                // Create sticky sidebar\r\n                o.sidebar.parents().css('-webkit-transform', 'none'); // Fix for WebKit bug - https://code.google.com/p/chromium/issues/detail?id=20574\r\n                o.sidebar.css({\r\n                    'position': o.options.defaultPosition,\r\n                    'overflow': 'visible',\r\n                    // The \"box-sizing\" must be set to \"content-box\" because we set a fixed height to this element when the sticky sidebar has a fixed position.\r\n                    '-webkit-box-sizing': 'border-box',\r\n                    '-moz-box-sizing': 'border-box',\r\n                    'box-sizing': 'border-box'\r\n                });\r\n\r\n                // Get the sticky sidebar element. If none has been found, then create one.\r\n                o.stickySidebar = o.sidebar.find('.theiaStickySidebar');\r\n                if (o.stickySidebar.length == 0) {\r\n                    // Remove <script> tags, otherwise they will be run again when added to the stickySidebar.\r\n                    var javaScriptMIMETypes = /(?:text|application)\\/(?:x-)?(?:javascript|ecmascript)/i;\r\n                    o.sidebar.find('script').filter(function (index, script) {\r\n                        return script.type.length === 0 || script.type.match(javaScriptMIMETypes);\r\n                    }).remove();\r\n\r\n                    o.stickySidebar = $('<div>').addClass('theiaStickySidebar').append(o.sidebar.children());\r\n                    o.sidebar.append(o.stickySidebar);\r\n                }\r\n\r\n                // Get existing top and bottom margins and paddings\r\n                o.marginBottom = parseInt(o.sidebar.css('margin-bottom'));\r\n                o.paddingTop = parseInt(o.sidebar.css('padding-top'));\r\n                o.paddingBottom = parseInt(o.sidebar.css('padding-bottom'));\r\n\r\n                // Add a temporary padding rule to check for collapsable margins.\r\n                var collapsedTopHeight = o.stickySidebar.offset().top;\r\n                var collapsedBottomHeight = o.stickySidebar.outerHeight();\r\n                o.stickySidebar.css('padding-top', 1);\r\n                o.stickySidebar.css('padding-bottom', 1);\r\n                collapsedTopHeight -= o.stickySidebar.offset().top;\r\n                collapsedBottomHeight = o.stickySidebar.outerHeight() - collapsedBottomHeight - collapsedTopHeight;\r\n                if (collapsedTopHeight == 0) {\r\n                    o.stickySidebar.css('padding-top', 0);\r\n                    o.stickySidebarPaddingTop = 0;\r\n                }\r\n                else {\r\n                    o.stickySidebarPaddingTop = 1;\r\n                }\r\n\r\n                if (collapsedBottomHeight == 0) {\r\n                    o.stickySidebar.css('padding-bottom', 0);\r\n                    o.stickySidebarPaddingBottom = 0;\r\n                }\r\n                else {\r\n                    o.stickySidebarPaddingBottom = 1;\r\n                }\r\n\r\n                // We use this to know whether the user is scrolling up or down.\r\n                o.previousScrollTop = null;\r\n\r\n                // Scroll top (value) when the sidebar has fixed position.\r\n                o.fixedScrollTop = 0;\r\n\r\n                // Set sidebar to default values.\r\n                resetSidebar();\r\n\r\n                o.onScroll = function (o) {\r\n                    // Stop if the sidebar isn't visible.\r\n                    if (!o.stickySidebar.is(\":visible\")) {\r\n                        return;\r\n                    }\r\n\r\n                    // Stop if the window is too small.\r\n                    if ($('body').width() < o.options.minWidth) {\r\n                        resetSidebar();\r\n                        return;\r\n                    }\r\n\r\n                    // Stop if the sidebar width is larger than the container width (e.g. the theme is responsive and the sidebar is now below the content)\r\n                    if (o.options.disableOnResponsiveLayouts) {\r\n                        var sidebarWidth = o.sidebar.outerWidth(o.sidebar.css('float') == 'none');\r\n\r\n                        if (sidebarWidth + 50 > o.container.width()) {\r\n                            resetSidebar();\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    var scrollTop = $(document).scrollTop();\r\n                    var position = 'static';\r\n\r\n                    // If the user has scrolled down enough for the sidebar to be clipped at the top, then we can consider changing its position.\r\n                    if (scrollTop >= o.sidebar.offset().top + (o.paddingTop - o.options.additionalMarginTop)) {\r\n                        // The top and bottom offsets, used in various calculations.\r\n                        var offsetTop = o.paddingTop + options.additionalMarginTop;\r\n                        var offsetBottom = o.paddingBottom + o.marginBottom + options.additionalMarginBottom;\r\n\r\n                        // All top and bottom positions are relative to the window, not to the parent elemnts.\r\n                        var containerTop = o.sidebar.offset().top;\r\n                        var containerBottom = o.sidebar.offset().top + getClearedHeight(o.container);\r\n\r\n                        // The top and bottom offsets relative to the window screen top (zero) and bottom (window height).\r\n                        var windowOffsetTop = 0 + options.additionalMarginTop;\r\n                        var windowOffsetBottom;\r\n\r\n                        var sidebarSmallerThanWindow = (o.stickySidebar.outerHeight() + offsetTop + offsetBottom) < $(window).height();\r\n                        if (sidebarSmallerThanWindow) {\r\n                            windowOffsetBottom = windowOffsetTop + o.stickySidebar.outerHeight();\r\n                        }\r\n                        else {\r\n                            windowOffsetBottom = $(window).height() - o.marginBottom - o.paddingBottom - options.additionalMarginBottom;\r\n                        }\r\n\r\n                        var staticLimitTop = containerTop - scrollTop + o.paddingTop;\r\n                        var staticLimitBottom = containerBottom - scrollTop - o.paddingBottom - o.marginBottom;\r\n\r\n                        var top = o.stickySidebar.offset().top - scrollTop;\r\n                        var scrollTopDiff = o.previousScrollTop - scrollTop;\r\n\r\n                        // If the sidebar position is fixed, then it won't move up or down by itself. So, we manually adjust the top coordinate.\r\n                        if (o.stickySidebar.css('position') == 'fixed') {\r\n                            if (o.options.sidebarBehavior == 'modern') {\r\n                                top += scrollTopDiff;\r\n                            }\r\n                        }\r\n\r\n                        if (o.options.sidebarBehavior == 'stick-to-top') {\r\n                            top = options.additionalMarginTop;\r\n                        }\r\n\r\n                        if (o.options.sidebarBehavior == 'stick-to-bottom') {\r\n                            top = windowOffsetBottom - o.stickySidebar.outerHeight();\r\n                        }\r\n\r\n                        if (scrollTopDiff > 0) { // If the user is scrolling up.\r\n                            top = Math.min(top, windowOffsetTop);\r\n                        }\r\n                        else { // If the user is scrolling down.\r\n                            top = Math.max(top, windowOffsetBottom - o.stickySidebar.outerHeight());\r\n                        }\r\n\r\n                        top = Math.max(top, staticLimitTop);\r\n\r\n                        top = Math.min(top, staticLimitBottom - o.stickySidebar.outerHeight());\r\n\r\n                        // If the sidebar is the same height as the container, we won't use fixed positioning.\r\n                        var sidebarSameHeightAsContainer = o.container.height() == o.stickySidebar.outerHeight();\r\n\r\n                        if (!sidebarSameHeightAsContainer && top == windowOffsetTop) {\r\n                            position = 'fixed';\r\n                        }\r\n                        else if (!sidebarSameHeightAsContainer && top == windowOffsetBottom - o.stickySidebar.outerHeight()) {\r\n                            position = 'fixed';\r\n                        }\r\n                        else if (scrollTop + top - o.sidebar.offset().top - o.paddingTop <= options.additionalMarginTop) {\r\n                            // Stuck to the top of the page. No special behavior.\r\n                            position = 'static';\r\n                        }\r\n                        else {\r\n                            // Stuck to the bottom of the page.\r\n                            position = 'absolute';\r\n                        }\r\n                    }\r\n\r\n                    /*\r\n                     * Performance notice: It's OK to set these CSS values at each resize/scroll, even if they don't change.\r\n                     * It's way slower to first check if the values have changed.\r\n                     */\r\n                    if (position == 'fixed') {\r\n                        var scrollLeft = $(document).scrollLeft();\r\n\r\n                        o.stickySidebar.css({\r\n                            'position': 'fixed',\r\n                            'width': getWidthForObject(o.stickySidebar) + 'px',\r\n                            'transform': 'translateY(' + top + 'px)',\r\n                            'left': (o.sidebar.offset().left + parseInt(o.sidebar.css('padding-left')) - scrollLeft) + 'px',\r\n                            'top': '0px'\r\n                        });\r\n                    }\r\n                    else if (position == 'absolute') {\r\n                        var css = {};\r\n\r\n                        if (o.stickySidebar.css('position') != 'absolute') {\r\n                            css.position = 'absolute';\r\n                            css.transform = 'translateY(' + (scrollTop + top - o.sidebar.offset().top - o.stickySidebarPaddingTop - o.stickySidebarPaddingBottom) + 'px)';\r\n                            css.top = '0px';\r\n                        }\r\n\r\n                        css.width = getWidthForObject(o.stickySidebar) + 'px';\r\n                        css.left = '';\r\n\r\n                        o.stickySidebar.css(css);\r\n                    }\r\n                    else if (position == 'static') {\r\n                        resetSidebar();\r\n                    }\r\n\r\n                    if (position != 'static') {\r\n                        if (o.options.updateSidebarHeight == true) {\r\n                            o.sidebar.css({\r\n                                'min-height': o.stickySidebar.outerHeight() + o.stickySidebar.offset().top - o.sidebar.offset().top + o.paddingBottom\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    o.previousScrollTop = scrollTop;\r\n                };\r\n\r\n                // Initialize the sidebar's position.\r\n                o.onScroll(o);\r\n\r\n                // Recalculate the sidebar's position on every scroll and resize.\r\n                $(document).on('scroll.' + o.options.namespace, function (o) {\r\n                    return function () {\r\n                        o.onScroll(o);\r\n                    };\r\n                }(o));\r\n                $(window).on('resize.' + o.options.namespace, function (o) {\r\n                    return function () {\r\n                        o.stickySidebar.css({'position': 'static'});\r\n                        o.onScroll(o);\r\n                    };\r\n                }(o));\r\n\t\t\t\t\t if (o.options.scrollSelector) {\n                    $(window).on('resize.' + o.options.namespace, function (o) {\r\n\t\t\t\t\t\t\t  return function () {\r\n\t\t\t\t\t\t\t\t\to.stickySidebar.css({'position': 'static'});\r\n\t\t\t\t\t\t\t\t\to.onScroll(o);\r\n\t\t\t\t\t\t\t  };\r\n                    }(o));\n\t\t\t\t\t }\r\n\t\t\t\t\t \r\n\r\n                // Recalculate the sidebar's position every time the sidebar changes its size.\r\n                if (typeof ResizeSensor !== 'undefined') {\r\n                    new ResizeSensor(o.stickySidebar[0], function (o) {\r\n                        return function () {\r\n                            o.onScroll(o);\r\n                        };\r\n                    }(o));\r\n                }\r\n\r\n                // Reset the sidebar to its default state\r\n                function resetSidebar() {\r\n                    o.fixedScrollTop = 0;\r\n                    o.sidebar.css({\r\n                        'min-height': '1px'\r\n                    });\r\n                    o.stickySidebar.css({\r\n                        'position': 'static',\r\n                        'width': '',\r\n                        'transform': 'none'\r\n                    });\r\n                }\r\n\r\n                // Get the height of a div as if its floated children were cleared. Note that this function fails if the floats are more than one level deep.\r\n                function getClearedHeight(e) {\r\n                    var height = e.height();\r\n\r\n                    e.children().each(function () {\r\n                        height = Math.max(height, $(this).height());\r\n                    });\r\n\r\n                    return height;\r\n                }\r\n            });\r\n        }\r\n\r\n        function getWidthForObject(object) {\r\n            var width;\r\n\r\n            try {\r\n                width = object[0].getBoundingClientRect().width;\r\n            }\r\n            catch (err) {\r\n            }\r\n\r\n            if (typeof width === \"undefined\") {\r\n                width = object.width();\r\n            }\r\n\r\n            return width;\r\n        }\r\n\r\n        return this;\r\n    }\r\n})(jQuery);\r\n"]}